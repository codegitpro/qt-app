// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from form.djinni

#pragma once

#include "djinni_support.hpp"
#include "os_form.hpp"

namespace djinni_generated {

class NativeOsForm final : ::djinni::JniInterface<::ai::OsForm, NativeOsForm> {
public:
    using CppType = std::shared_ptr<::ai::OsForm>;
    using CppOptType = std::shared_ptr<::ai::OsForm>;
    using JniType = jobject;

    using Boxed = NativeOsForm;

    ~NativeOsForm();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeOsForm>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeOsForm>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeOsForm();
    friend ::djinni::JniClass<NativeOsForm>;
    friend ::djinni::JniInterface<::ai::OsForm, NativeOsForm>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::OsForm
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void action_result(::ai::Status outcome, const std::vector<::ai::Message> & lines) override;
        void progress(int32_t position, int32_t total) override;
        void enable(int32_t group) override;
        void disable(int32_t group) override;
        std::unordered_map<int32_t, std::string> input() override;

    private:
        friend ::djinni::JniInterface<::ai::OsForm, ::djinni_generated::NativeOsForm>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/OsForm") };
    const jmethodID method_actionResult { ::djinni::jniGetMethodID(clazz.get(), "actionResult", "(Lnet/ai/Status;Ljava/util/ArrayList;)V") };
    const jmethodID method_progress { ::djinni::jniGetMethodID(clazz.get(), "progress", "(II)V") };
    const jmethodID method_enable { ::djinni::jniGetMethodID(clazz.get(), "enable", "(I)V") };
    const jmethodID method_disable { ::djinni::jniGetMethodID(clazz.get(), "disable", "(I)V") };
    const jmethodID method_input { ::djinni::jniGetMethodID(clazz.get(), "input", "()Ljava/util/HashMap;") };
};

}  // namespace djinni_generated
