// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include "djinni_support.hpp"
#include "form_view.hpp"

namespace djinni_generated {

class NativeFormView final : ::djinni::JniInterface<::ai::FormView, NativeFormView> {
public:
    using CppType = std::shared_ptr<::ai::FormView>;
    using CppOptType = std::shared_ptr<::ai::FormView>;
    using JniType = jobject;

    using Boxed = NativeFormView;

    ~NativeFormView();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeFormView>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeFormView>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeFormView();
    friend ::djinni::JniClass<NativeFormView>;
    friend ::djinni::JniInterface<::ai::FormView, NativeFormView>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::FormView
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void replace_form(const std::shared_ptr<::ai::FormViewmodel> & vm) override;
        void push_form(const std::shared_ptr<::ai::FormViewmodel> & vm) override;
        void set_screen_name(const std::string & title) override;

    private:
        friend ::djinni::JniInterface<::ai::FormView, ::djinni_generated::NativeFormView>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/FormView") };
    const jmethodID method_replaceForm { ::djinni::jniGetMethodID(clazz.get(), "replaceForm", "(Lnet/ai/FormViewmodel;)V") };
    const jmethodID method_pushForm { ::djinni::jniGetMethodID(clazz.get(), "pushForm", "(Lnet/ai/FormViewmodel;)V") };
    const jmethodID method_setScreenName { ::djinni::jniGetMethodID(clazz.get(), "setScreenName", "(Ljava/lang/String;)V") };
};

}  // namespace djinni_generated
