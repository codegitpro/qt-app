// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from form2.djinni

#pragma once

#include "djinni_support.hpp"
#include "field.hpp"

namespace djinni_generated {

class NativeField final {
public:
    using CppType = ::ai::Field;
    using JniType = jobject;

    using Boxed = NativeField;

    ~NativeField();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeField();
    friend ::djinni::JniClass<NativeField>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/Field") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lnet/ai/Block;ILnet/ai/DataType;Lnet/ai/FieldType;Ljava/lang/String;ZLnet/ai/Style;)V") };
    const jfieldID field_mRect { ::djinni::jniGetFieldID(clazz.get(), "mRect", "Lnet/ai/Block;") };
    const jfieldID field_mFieldId { ::djinni::jniGetFieldID(clazz.get(), "mFieldId", "I") };
    const jfieldID field_mDataT { ::djinni::jniGetFieldID(clazz.get(), "mDataT", "Lnet/ai/DataType;") };
    const jfieldID field_mFieldT { ::djinni::jniGetFieldID(clazz.get(), "mFieldT", "Lnet/ai/FieldType;") };
    const jfieldID field_mTitle { ::djinni::jniGetFieldID(clazz.get(), "mTitle", "Ljava/lang/String;") };
    const jfieldID field_mRequired { ::djinni::jniGetFieldID(clazz.get(), "mRequired", "Z") };
    const jfieldID field_mStyle { ::djinni::jniGetFieldID(clazz.get(), "mStyle", "Lnet/ai/Style;") };
};

}  // namespace djinni_generated
