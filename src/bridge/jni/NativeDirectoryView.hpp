// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include "directory_view.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeDirectoryView final : ::djinni::JniInterface<::ai::DirectoryView, NativeDirectoryView> {
public:
    using CppType = std::shared_ptr<::ai::DirectoryView>;
    using CppOptType = std::shared_ptr<::ai::DirectoryView>;
    using JniType = jobject;

    using Boxed = NativeDirectoryView;

    ~NativeDirectoryView();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeDirectoryView>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeDirectoryView>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeDirectoryView();
    friend ::djinni::JniClass<NativeDirectoryView>;
    friend ::djinni::JniInterface<::ai::DirectoryView, NativeDirectoryView>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::DirectoryView
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void refresh_list(const std::vector<int32_t> & folder_path, const ::ai::DirectoriesDetail & dirs, const ::ai::FilesDetail & files, const std::vector<std::string> & new_directory_names, const std::vector<std::string> & new_file_names) override;
        void file_states_changed(const std::vector<int32_t> & folder_path, const std::vector<int32_t> & file_ids, const std::vector<::ai::FileState> & states) override;
        void file_changed(const std::vector<int32_t> & folder_path, int32_t file_id, int32_t file_name_id, int64_t size, int32_t percentage, ::ai::FileState state, const std::vector<uint8_t> & thumbnail) override;

    private:
        friend ::djinni::JniInterface<::ai::DirectoryView, ::djinni_generated::NativeDirectoryView>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/DirectoryView") };
    const jmethodID method_refreshList { ::djinni::jniGetMethodID(clazz.get(), "refreshList", "(Ljava/util/ArrayList;Lnet/ai/DirectoriesDetail;Lnet/ai/FilesDetail;Ljava/util/ArrayList;Ljava/util/ArrayList;)V") };
    const jmethodID method_fileStatesChanged { ::djinni::jniGetMethodID(clazz.get(), "fileStatesChanged", "(Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V") };
    const jmethodID method_fileChanged { ::djinni::jniGetMethodID(clazz.get(), "fileChanged", "(Ljava/util/ArrayList;IIJILnet/ai/FileState;[B)V") };
};

}  // namespace djinni_generated
