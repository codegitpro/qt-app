// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#include "NativeView.hpp"  // my header
#include "Marshal.hpp"
#include "NativeFolderViewmodel.hpp"
#include "NativeFormViewmodel.hpp"
#include "NativeStoreViewmodel.hpp"

namespace djinni_generated {

NativeView::NativeView() : ::djinni::JniInterface<::ai::View, NativeView>() {}

NativeView::~NativeView() = default;

NativeView::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeView::JavaProxy::~JavaProxy() = default;

void NativeView::JavaProxy::create_main_menu(const std::shared_ptr<::ai::FormViewmodel> & c_root_form_vm, const std::shared_ptr<::ai::FolderViewmodel> & c_root_folder_vm, const std::shared_ptr<::ai::FormViewmodel> & c_user_vm, const std::shared_ptr<::ai::FormViewmodel> & c_plan_vm, const std::shared_ptr<::ai::FormViewmodel> & c_settings_vm) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_createMainMenu,
                           ::djinni::get(::djinni_generated::NativeFormViewmodel::fromCpp(jniEnv, c_root_form_vm)),
                           ::djinni::get(::djinni_generated::NativeFolderViewmodel::fromCpp(jniEnv, c_root_folder_vm)),
                           ::djinni::get(::djinni_generated::NativeFormViewmodel::fromCpp(jniEnv, c_user_vm)),
                           ::djinni::get(::djinni_generated::NativeFormViewmodel::fromCpp(jniEnv, c_plan_vm)),
                           ::djinni::get(::djinni_generated::NativeFormViewmodel::fromCpp(jniEnv, c_settings_vm)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::select_menu(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_selectMenu,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::show_menu(bool c_visible) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_showMenu,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_visible)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::send_invite() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_sendInvite);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::push_form(const std::shared_ptr<::ai::FormViewmodel> & c_vm) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushForm,
                           ::djinni::get(::djinni_generated::NativeFormViewmodel::fromCpp(jniEnv, c_vm)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::replace_form(const std::shared_ptr<::ai::FormViewmodel> & c_vm) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_replaceForm,
                           ::djinni::get(::djinni_generated::NativeFormViewmodel::fromCpp(jniEnv, c_vm)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::copy_to_clipboard(const std::string & c_content) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_copyToClipboard,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_content)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::open_link_in_browser(const std::string & c_url) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_openLinkInBrowser,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::register_store_vm(const std::shared_ptr<::ai::StoreViewmodel> & c_vm) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_registerStoreVm,
                           ::djinni::get(::djinni_generated::NativeStoreViewmodel::fromCpp(jniEnv, c_vm)));
    ::djinni::jniExceptionCheck(jniEnv);
}
bool NativeView::JavaProxy::is_authorized_for_payments() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isAuthorizedForPayments);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
void NativeView::JavaProxy::fetch_products(const std::vector<std::string> & c_product_ids) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fetchProducts,
                           ::djinni::get(::djinni::List<::djinni::String>::fromCpp(jniEnv, c_product_ids)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::subscription_purchase(const std::string & c_email, const std::string & c_product_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_subscriptionPurchase,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_email)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_product_id)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::subscription_restore(const std::string & c_email) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_subscriptionRestore,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_email)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeView::JavaProxy::subscription_cancel(const std::string & c_product_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_subscriptionCancel,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_product_id)));
    ::djinni::jniExceptionCheck(jniEnv);
}
std::string NativeView::JavaProxy::subscription_receipt(const std::string & c_product_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_subscriptionReceipt,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_product_id)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
void NativeView::JavaProxy::subscription_manage() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeView>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_subscriptionManage);
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
