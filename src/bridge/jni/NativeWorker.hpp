// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include "djinni_support.hpp"
#include "worker.hpp"

namespace djinni_generated {

class NativeWorker final : ::djinni::JniInterface<::ai::Worker, NativeWorker> {
public:
    using CppType = std::shared_ptr<::ai::Worker>;
    using CppOptType = std::shared_ptr<::ai::Worker>;
    using JniType = jobject;

    using Boxed = NativeWorker;

    ~NativeWorker();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeWorker>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeWorker>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeWorker();
    friend ::djinni::JniClass<NativeWorker>;
    friend ::djinni::JniInterface<::ai::Worker, NativeWorker>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::Worker
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void schedule(const std::shared_ptr<::ai::Task> & todo) override;

    private:
        friend ::djinni::JniInterface<::ai::Worker, ::djinni_generated::NativeWorker>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/Worker") };
    const jmethodID method_schedule { ::djinni::jniGetMethodID(clazz.get(), "schedule", "(Lnet/ai/Task;)V") };
};

}  // namespace djinni_generated
