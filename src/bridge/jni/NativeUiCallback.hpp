// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include "djinni_support.hpp"
#include "ui_callback.hpp"

namespace djinni_generated {

class NativeUiCallback final : ::djinni::JniInterface<::ai::UiCallback, NativeUiCallback> {
public:
    using CppType = std::shared_ptr<::ai::UiCallback>;
    using CppOptType = std::shared_ptr<::ai::UiCallback>;
    using JniType = jobject;

    using Boxed = NativeUiCallback;

    ~NativeUiCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeUiCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeUiCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeUiCallback();
    friend ::djinni::JniClass<NativeUiCallback>;
    friend ::djinni::JniInterface<::ai::UiCallback, NativeUiCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::UiCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void gui_thread(const std::shared_ptr<::ai::VoidResult> & cb) override;

    private:
        friend ::djinni::JniInterface<::ai::UiCallback, ::djinni_generated::NativeUiCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/UiCallback") };
    const jmethodID method_guiThread { ::djinni::jniGetMethodID(clazz.get(), "guiThread", "(Lnet/ai/VoidResult;)V") };
};

}  // namespace djinni_generated
