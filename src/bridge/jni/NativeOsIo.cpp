// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#include "NativeOsIo.hpp"  // my header
#include "Marshal.hpp"
#include "NativeBinaryResult.hpp"
#include "NativeBoolResult.hpp"
#include "NativeCancellationToken.hpp"
#include "NativeFileType.hpp"
#include "NativeHeader.hpp"
#include "NativeHttpProgressResult.hpp"
#include "NativeHttpResult.hpp"
#include "NativeHttpVerb.hpp"
#include "NativeLogType.hpp"
#include "NativeLongResult.hpp"
#include "NativeStringResult.hpp"
#include "NativeStringsResult.hpp"
#include "NativeVoidResult.hpp"

namespace djinni_generated {

NativeOsIo::NativeOsIo() : ::djinni::JniInterface<::ai::OsIo, NativeOsIo>() {}

NativeOsIo::~NativeOsIo() = default;

NativeOsIo::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeOsIo::JavaProxy::~JavaProxy() = default;

void NativeOsIo::JavaProxy::log(::ai::LogType c_type, int32_t c_line, const std::string & c_file, const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_log,
                           ::djinni::get(::djinni_generated::NativeLogType::fromCpp(jniEnv, c_type)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_line)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::log_lines(::ai::LogType c_type, int32_t c_line, const std::string & c_file, const std::vector<std::string> & c_messages) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_logLines,
                           ::djinni::get(::djinni_generated::NativeLogType::fromCpp(jniEnv, c_type)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_line)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file)),
                           ::djinni::get(::djinni::List<::djinni::String>::fromCpp(jniEnv, c_messages)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_readall(const std::string & c_path, const std::shared_ptr<::ai::BinaryResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileReadall,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                           ::djinni::get(::djinni_generated::NativeBinaryResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_writeall(const std::string & c_path, const std::vector<uint8_t> & c_content, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileWriteall,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                           ::djinni::get(::djinni::Binary::fromCpp(jniEnv, c_content)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_writeall_safely(const std::string & c_path, const std::vector<uint8_t> & c_content, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileWriteallSafely,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                           ::djinni::get(::djinni::Binary::fromCpp(jniEnv, c_content)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_write_password(const std::string & c_username, const std::string & c_password, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileWritePassword,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_username)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_password)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_read_password(const std::string & c_username, const std::shared_ptr<::ai::StringResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileReadPassword,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_username)),
                           ::djinni::get(::djinni_generated::NativeStringResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_size(const std::string & c_path, const std::shared_ptr<::ai::LongResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileSize,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                           ::djinni::get(::djinni_generated::NativeLongResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
bool NativeOsIo::JavaProxy::file_thumbnail(const std::string & c_path, ::ai::FileType c_type, const std::shared_ptr<::ai::BinaryResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_fileThumbnail,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                                          ::djinni::get(::djinni_generated::NativeFileType::fromCpp(jniEnv, c_type)),
                                          ::djinni::get(::djinni_generated::NativeBinaryResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
void NativeOsIo::JavaProxy::copy_file(const std::string & c_current_path, const std::string & c_new_path, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_copyFile,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_current_path)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_new_path)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::make_path(const std::string & c_path, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_makePath,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_path)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::rename_file(const std::string & c_current_path, const std::string & c_new_path, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_renameFile,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_current_path)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_new_path)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
std::shared_ptr<::ai::CancellationToken> NativeOsIo::JavaProxy::http_request(::ai::HttpVerb c_verb, const std::string & c_url, const std::vector<::ai::Header> & c_headers, const std::string & c_body, const std::shared_ptr<::ai::HttpResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_httpRequest,
                                         ::djinni::get(::djinni_generated::NativeHttpVerb::fromCpp(jniEnv, c_verb)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::List<::djinni_generated::NativeHeader>::fromCpp(jniEnv, c_headers)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_body)),
                                         ::djinni::get(::djinni_generated::NativeHttpResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeCancellationToken::toCpp(jniEnv, jret);
}
std::shared_ptr<::ai::CancellationToken> NativeOsIo::JavaProxy::http_upload_file(::ai::HttpVerb c_verb, const std::string & c_url, const std::string & c_file_path, const std::vector<::ai::Header> & c_headers, const std::shared_ptr<::ai::HttpProgressResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_httpUploadFile,
                                         ::djinni::get(::djinni_generated::NativeHttpVerb::fromCpp(jniEnv, c_verb)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file_path)),
                                         ::djinni::get(::djinni::List<::djinni_generated::NativeHeader>::fromCpp(jniEnv, c_headers)),
                                         ::djinni::get(::djinni_generated::NativeHttpProgressResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeCancellationToken::toCpp(jniEnv, jret);
}
std::shared_ptr<::ai::CancellationToken> NativeOsIo::JavaProxy::http_download_file(const std::string & c_url, const std::string & c_file_path, const std::vector<::ai::Header> & c_headers, int64_t c_size, const std::string & c_md5, const std::shared_ptr<::ai::HttpProgressResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_httpDownloadFile,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_file_path)),
                                         ::djinni::get(::djinni::List<::djinni_generated::NativeHeader>::fromCpp(jniEnv, c_headers)),
                                         ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_size)),
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_md5)),
                                         ::djinni::get(::djinni_generated::NativeHttpProgressResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeCancellationToken::toCpp(jniEnv, jret);
}
void NativeOsIo::JavaProxy::wait(int32_t c_millis, const std::shared_ptr<::ai::VoidResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_wait,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_millis)),
                           ::djinni::get(::djinni_generated::NativeVoidResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_expand_directories(const std::vector<std::string> & c_paths, const std::shared_ptr<::ai::StringsResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileExpandDirectories,
                           ::djinni::get(::djinni::List<::djinni::String>::fromCpp(jniEnv, c_paths)),
                           ::djinni::get(::djinni_generated::NativeStringsResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_copy_hierarchy(const std::string & c_dest_root_path, const std::vector<std::string> & c_dest_relative_paths, const std::vector<std::string> & c_src_paths) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileCopyHierarchy,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_dest_root_path)),
                           ::djinni::get(::djinni::List<::djinni::String>::fromCpp(jniEnv, c_dest_relative_paths)),
                           ::djinni::get(::djinni::List<::djinni::String>::fromCpp(jniEnv, c_src_paths)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOsIo::JavaProxy::file_clear_cache(const std::string & c_username, const std::shared_ptr<::ai::BoolResult> & c_result) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOsIo>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_fileClearCache,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_username)),
                           ::djinni::get(::djinni_generated::NativeBoolResult::fromCpp(jniEnv, c_result)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
