// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from form2.djinni

#pragma once

#include "djinni_support.hpp"
#include "generic_form.hpp"

namespace djinni_generated {

class NativeGenericForm final : ::djinni::JniInterface<::ai::GenericForm, NativeGenericForm> {
public:
    using CppType = std::shared_ptr<::ai::GenericForm>;
    using CppOptType = std::shared_ptr<::ai::GenericForm>;
    using JniType = jobject;

    using Boxed = NativeGenericForm;

    ~NativeGenericForm();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeGenericForm>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeGenericForm>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeGenericForm();
    friend ::djinni::JniClass<NativeGenericForm>;
    friend ::djinni::JniInterface<::ai::GenericForm, NativeGenericForm>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::GenericForm
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string input_get(int32_t input_id) override;
        void input_set(int32_t input_id, const std::string & value) override;
        void input_configure(int32_t input_id, const std::string & config) override;
        bool enable(int32_t element_id, bool enabled) override;
        void error(int32_t element_id, const std::string & message) override;
        void close() override;
        bool validate() override;
        void disable_actions() override;
        void show_message(const std::string & message) override;

    private:
        friend ::djinni::JniInterface<::ai::GenericForm, ::djinni_generated::NativeGenericForm>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/GenericForm") };
    const jmethodID method_inputGet { ::djinni::jniGetMethodID(clazz.get(), "inputGet", "(I)Ljava/lang/String;") };
    const jmethodID method_inputSet { ::djinni::jniGetMethodID(clazz.get(), "inputSet", "(ILjava/lang/String;)V") };
    const jmethodID method_inputConfigure { ::djinni::jniGetMethodID(clazz.get(), "inputConfigure", "(ILjava/lang/String;)V") };
    const jmethodID method_enable { ::djinni::jniGetMethodID(clazz.get(), "enable", "(IZ)Z") };
    const jmethodID method_error { ::djinni::jniGetMethodID(clazz.get(), "error", "(ILjava/lang/String;)V") };
    const jmethodID method_close { ::djinni::jniGetMethodID(clazz.get(), "close", "()V") };
    const jmethodID method_validate { ::djinni::jniGetMethodID(clazz.get(), "validate", "()Z") };
    const jmethodID method_disableActions { ::djinni::jniGetMethodID(clazz.get(), "disableActions", "()V") };
    const jmethodID method_showMessage { ::djinni::jniGetMethodID(clazz.get(), "showMessage", "(Ljava/lang/String;)V") };
};

}  // namespace djinni_generated
