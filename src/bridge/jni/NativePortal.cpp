// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#include "NativePortal.hpp"  // my header
#include "Marshal.hpp"
#include "NativeDirectoryView.hpp"
#include "NativeOsForm.hpp"
#include "NativeOsGui.hpp"
#include "NativeOsIo.hpp"
#include "NativeScreenType.hpp"
#include "NativeWorker.hpp"

namespace djinni_generated {

NativePortal::NativePortal() : ::djinni::JniInterface<::ai::Portal, NativePortal>("net/ai/Portal$CppProxy") {}

NativePortal::~NativePortal() = default;


CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ai::Portal>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_net_ai_Portal_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/, jobject j_w, jstring j_appDataLocation, jint j_thumbPx, jobject j_io, jobject j_gui, jobject j_type)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ai::Portal::create(::djinni_generated::NativeWorker::toCpp(jniEnv, j_w),
                                      ::djinni::String::toCpp(jniEnv, j_appDataLocation),
                                      ::djinni::I32::toCpp(jniEnv, j_thumbPx),
                                      ::djinni_generated::NativeOsIo::toCpp(jniEnv, j_io),
                                      ::djinni_generated::NativeOsGui::toCpp(jniEnv, j_gui),
                                      ::djinni_generated::NativeScreenType::toCpp(jniEnv, j_type));
        return ::djinni::release(::djinni_generated::NativePortal::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1createFolder(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_parentFolderId, jstring j_folderName, jobject j_form)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->create_folder(::djinni::I32::toCpp(jniEnv, j_parentFolderId),
                           ::djinni::String::toCpp(jniEnv, j_folderName),
                           ::djinni_generated::NativeOsForm::toCpp(jniEnv, j_form));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1renameFolder(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_folderId, jstring j_newName, jobject j_form)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->rename_folder(::djinni::I32::toCpp(jniEnv, j_folderId),
                           ::djinni::String::toCpp(jniEnv, j_newName),
                           ::djinni_generated::NativeOsForm::toCpp(jniEnv, j_form));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1renameFile(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_fileId, jstring j_newName, jobject j_form)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->rename_file(::djinni::I32::toCpp(jniEnv, j_fileId),
                         ::djinni::String::toCpp(jniEnv, j_newName),
                         ::djinni_generated::NativeOsForm::toCpp(jniEnv, j_form));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_net_ai_Portal_00024CppProxy_native_1ping(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        auto r = ref->ping();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1watchDirectory(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_id, jobject j_view)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->watch_directory(::djinni::I32::toCpp(jniEnv, j_id),
                             ::djinni_generated::NativeDirectoryView::toCpp(jniEnv, j_view));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1unwatchDirectory(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_id)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->unwatch_directory(::djinni::I32::toCpp(jniEnv, j_id));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1downloadAll(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_folderIds, jobject j_fileIds)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->download_all(::djinni::List<::djinni::I32>::toCpp(jniEnv, j_folderIds),
                          ::djinni::List<::djinni::I32>::toCpp(jniEnv, j_fileIds));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1saveAll(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_targetFolder, jobject j_folderIds, jobject j_fileIds)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->save_all(::djinni::String::toCpp(jniEnv, j_targetFolder),
                      ::djinni::List<::djinni::I32>::toCpp(jniEnv, j_folderIds),
                      ::djinni::List<::djinni::I32>::toCpp(jniEnv, j_fileIds));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1deleteAll(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_folderIds, jobject j_fileIds)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->delete_all(::djinni::List<::djinni::I32>::toCpp(jniEnv, j_folderIds),
                        ::djinni::List<::djinni::I32>::toCpp(jniEnv, j_fileIds));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1uploadAll(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_targetFolderId, jstring j_commonFolder, jobject j_relativeFilePaths)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->upload_all(::djinni::I32::toCpp(jniEnv, j_targetFolderId),
                        ::djinni::String::toCpp(jniEnv, j_commonFolder),
                        ::djinni::List<::djinni::String>::toCpp(jniEnv, j_relativeFilePaths));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1uploadFilesOnly(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_targetFolderId, jobject j_filenames, jobject j_paths, jobject j_thumbnails)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->upload_files_only(::djinni::I32::toCpp(jniEnv, j_targetFolderId),
                               ::djinni::List<::djinni::String>::toCpp(jniEnv, j_filenames),
                               ::djinni::List<::djinni::String>::toCpp(jniEnv, j_paths),
                               ::djinni::List<::djinni::Binary>::toCpp(jniEnv, j_thumbnails));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1preview(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_fileId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->preview(::djinni::I32::toCpp(jniEnv, j_fileId));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1clearCache(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->clear_cache();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1cancelNetworkOperations(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->cancel_network_operations();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1signOut(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->sign_out();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_Portal_00024CppProxy_native_1about(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::Portal>(nativeRef);
        ref->about();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
