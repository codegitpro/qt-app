// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include "diagnostic.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeDiagnostic final : ::djinni::JniInterface<::ai::Diagnostic, NativeDiagnostic> {
public:
    using CppType = std::shared_ptr<::ai::Diagnostic>;
    using CppOptType = std::shared_ptr<::ai::Diagnostic>;
    using JniType = jobject;

    using Boxed = NativeDiagnostic;

    ~NativeDiagnostic();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeDiagnostic>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeDiagnostic>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeDiagnostic();
    friend ::djinni::JniClass<NativeDiagnostic>;
    friend ::djinni::JniInterface<::ai::Diagnostic, NativeDiagnostic>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::Diagnostic
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void log(::ai::LogType type, int32_t line, const std::string & file, const std::string & message) override;
        void log_lines(::ai::LogType type, int32_t line, const std::string & file, const std::vector<std::string> & messages) override;

    private:
        friend ::djinni::JniInterface<::ai::Diagnostic, ::djinni_generated::NativeDiagnostic>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/Diagnostic") };
    const jmethodID method_log { ::djinni::jniGetMethodID(clazz.get(), "log", "(Lnet/ai/LogType;ILjava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_logLines { ::djinni::jniGetMethodID(clazz.get(), "logLines", "(Lnet/ai/LogType;ILjava/lang/String;Ljava/util/ArrayList;)V") };
};

}  // namespace djinni_generated
