// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include "djinni_support.hpp"
#include "os_io.hpp"

namespace djinni_generated {

class NativeOsIo final : ::djinni::JniInterface<::ai::OsIo, NativeOsIo> {
public:
    using CppType = std::shared_ptr<::ai::OsIo>;
    using CppOptType = std::shared_ptr<::ai::OsIo>;
    using JniType = jobject;

    using Boxed = NativeOsIo;

    ~NativeOsIo();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeOsIo>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeOsIo>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeOsIo();
    friend ::djinni::JniClass<NativeOsIo>;
    friend ::djinni::JniInterface<::ai::OsIo, NativeOsIo>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ai::OsIo
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void log(::ai::LogType type, int32_t line, const std::string & file, const std::string & message) override;
        void log_lines(::ai::LogType type, int32_t line, const std::string & file, const std::vector<std::string> & messages) override;
        void file_readall(const std::string & path, const std::shared_ptr<::ai::BinaryResult> & result) override;
        void file_writeall(const std::string & path, const std::vector<uint8_t> & content, const std::shared_ptr<::ai::BoolResult> & result) override;
        void file_writeall_safely(const std::string & path, const std::vector<uint8_t> & content, const std::shared_ptr<::ai::BoolResult> & result) override;
        void file_write_password(const std::string & username, const std::string & password, const std::shared_ptr<::ai::BoolResult> & result) override;
        void file_read_password(const std::string & username, const std::shared_ptr<::ai::StringResult> & result) override;
        void file_size(const std::string & path, const std::shared_ptr<::ai::LongResult> & result) override;
        bool file_thumbnail(const std::string & path, ::ai::FileType type, const std::shared_ptr<::ai::BinaryResult> & result) override;
        void copy_file(const std::string & current_path, const std::string & new_path, const std::shared_ptr<::ai::BoolResult> & result) override;
        void make_path(const std::string & path, const std::shared_ptr<::ai::BoolResult> & result) override;
        void rename_file(const std::string & current_path, const std::string & new_path, const std::shared_ptr<::ai::BoolResult> & result) override;
        std::shared_ptr<::ai::CancellationToken> http_request(::ai::HttpVerb verb, const std::string & url, const std::vector<::ai::Header> & headers, const std::string & body, const std::shared_ptr<::ai::HttpResult> & result) override;
        std::shared_ptr<::ai::CancellationToken> http_upload_file(::ai::HttpVerb verb, const std::string & url, const std::string & file_path, const std::vector<::ai::Header> & headers, const std::shared_ptr<::ai::HttpProgressResult> & result) override;
        std::shared_ptr<::ai::CancellationToken> http_download_file(const std::string & url, const std::string & file_path, const std::vector<::ai::Header> & headers, int64_t size, const std::string & md5, const std::shared_ptr<::ai::HttpProgressResult> & result) override;
        void wait(int32_t millis, const std::shared_ptr<::ai::VoidResult> & result) override;
        void file_expand_directories(const std::vector<std::string> & paths, const std::shared_ptr<::ai::StringsResult> & result) override;
        void file_copy_hierarchy(const std::string & dest_root_path, const std::vector<std::string> & dest_relative_paths, const std::vector<std::string> & src_paths) override;
        void file_clear_cache(const std::string & username, const std::shared_ptr<::ai::BoolResult> & result) override;

    private:
        friend ::djinni::JniInterface<::ai::OsIo, ::djinni_generated::NativeOsIo>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/ai/OsIo") };
    const jmethodID method_log { ::djinni::jniGetMethodID(clazz.get(), "log", "(Lnet/ai/LogType;ILjava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_logLines { ::djinni::jniGetMethodID(clazz.get(), "logLines", "(Lnet/ai/LogType;ILjava/lang/String;Ljava/util/ArrayList;)V") };
    const jmethodID method_fileReadall { ::djinni::jniGetMethodID(clazz.get(), "fileReadall", "(Ljava/lang/String;Lnet/ai/BinaryResult;)V") };
    const jmethodID method_fileWriteall { ::djinni::jniGetMethodID(clazz.get(), "fileWriteall", "(Ljava/lang/String;[BLnet/ai/BoolResult;)V") };
    const jmethodID method_fileWriteallSafely { ::djinni::jniGetMethodID(clazz.get(), "fileWriteallSafely", "(Ljava/lang/String;[BLnet/ai/BoolResult;)V") };
    const jmethodID method_fileWritePassword { ::djinni::jniGetMethodID(clazz.get(), "fileWritePassword", "(Ljava/lang/String;Ljava/lang/String;Lnet/ai/BoolResult;)V") };
    const jmethodID method_fileReadPassword { ::djinni::jniGetMethodID(clazz.get(), "fileReadPassword", "(Ljava/lang/String;Lnet/ai/StringResult;)V") };
    const jmethodID method_fileSize { ::djinni::jniGetMethodID(clazz.get(), "fileSize", "(Ljava/lang/String;Lnet/ai/LongResult;)V") };
    const jmethodID method_fileThumbnail { ::djinni::jniGetMethodID(clazz.get(), "fileThumbnail", "(Ljava/lang/String;Lnet/ai/FileType;Lnet/ai/BinaryResult;)Z") };
    const jmethodID method_copyFile { ::djinni::jniGetMethodID(clazz.get(), "copyFile", "(Ljava/lang/String;Ljava/lang/String;Lnet/ai/BoolResult;)V") };
    const jmethodID method_makePath { ::djinni::jniGetMethodID(clazz.get(), "makePath", "(Ljava/lang/String;Lnet/ai/BoolResult;)V") };
    const jmethodID method_renameFile { ::djinni::jniGetMethodID(clazz.get(), "renameFile", "(Ljava/lang/String;Ljava/lang/String;Lnet/ai/BoolResult;)V") };
    const jmethodID method_httpRequest { ::djinni::jniGetMethodID(clazz.get(), "httpRequest", "(Lnet/ai/HttpVerb;Ljava/lang/String;Ljava/util/ArrayList;Ljava/lang/String;Lnet/ai/HttpResult;)Lnet/ai/CancellationToken;") };
    const jmethodID method_httpUploadFile { ::djinni::jniGetMethodID(clazz.get(), "httpUploadFile", "(Lnet/ai/HttpVerb;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Lnet/ai/HttpProgressResult;)Lnet/ai/CancellationToken;") };
    const jmethodID method_httpDownloadFile { ::djinni::jniGetMethodID(clazz.get(), "httpDownloadFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;JLjava/lang/String;Lnet/ai/HttpProgressResult;)Lnet/ai/CancellationToken;") };
    const jmethodID method_wait { ::djinni::jniGetMethodID(clazz.get(), "wait", "(ILnet/ai/VoidResult;)V") };
    const jmethodID method_fileExpandDirectories { ::djinni::jniGetMethodID(clazz.get(), "fileExpandDirectories", "(Ljava/util/ArrayList;Lnet/ai/StringsResult;)V") };
    const jmethodID method_fileCopyHierarchy { ::djinni::jniGetMethodID(clazz.get(), "fileCopyHierarchy", "(Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;)V") };
    const jmethodID method_fileClearCache { ::djinni::jniGetMethodID(clazz.get(), "fileClearCache", "(Ljava/lang/String;Lnet/ai/BoolResult;)V") };
};

}  // namespace djinni_generated
