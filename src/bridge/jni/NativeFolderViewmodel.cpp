// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#include "NativeFolderViewmodel.hpp"  // my header
#include "Marshal.hpp"
#include "NativeFolderView.hpp"

namespace djinni_generated {

NativeFolderViewmodel::NativeFolderViewmodel() : ::djinni::JniInterface<::ai::FolderViewmodel, NativeFolderViewmodel>("net/ai/FolderViewmodel$CppProxy") {}

NativeFolderViewmodel::~NativeFolderViewmodel() = default;


CJNIEXPORT void JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ai::FolderViewmodel>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1onLoad(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_view)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        ref->on_load(::djinni_generated::NativeFolderView::toCpp(jniEnv, j_view));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1folderId(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        auto r = ref->folder_id();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1listThumbnailContent(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_row)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        auto r = ref->list_thumbnail_content(::djinni::I32::toCpp(jniEnv, j_row));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1listSelected(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_section, jint j_row)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        auto r = ref->list_selected(::djinni::I32::toCpp(jniEnv, j_section),
                                    ::djinni::I32::toCpp(jniEnv, j_row));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1listAction(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_section, jint j_row, jint j_subIndex)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        ref->list_action(::djinni::I32::toCpp(jniEnv, j_section),
                         ::djinni::I32::toCpp(jniEnv, j_row),
                         ::djinni::I32::toCpp(jniEnv, j_subIndex));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1uploadFileOnly(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_filename, jstring j_path, jbyteArray j_thumbnail)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        ref->upload_file_only(::djinni::String::toCpp(jniEnv, j_filename),
                              ::djinni::String::toCpp(jniEnv, j_path),
                              ::djinni::Binary::toCpp(jniEnv, j_thumbnail));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_net_ai_FolderViewmodel_00024CppProxy_native_1uploadFilesOnly(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_filenames, jobject j_paths, jobject j_thumbnails)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ai::FolderViewmodel>(nativeRef);
        ref->upload_files_only(::djinni::List<::djinni::String>::toCpp(jniEnv, j_filenames),
                               ::djinni::List<::djinni::String>::toCpp(jniEnv, j_paths),
                               ::djinni::List<::djinni::Binary>::toCpp(jniEnv, j_thumbnails));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
