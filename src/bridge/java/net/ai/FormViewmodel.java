// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

package net.ai;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class FormViewmodel {
    public abstract void action(int elementId);

    public abstract void back();

    public abstract ArrayList<Field> fields();

    public abstract void onLoad(FormView view, GenericForm form);

    public abstract boolean hideNavigation();

    public abstract boolean holdonToVm();

    private static final class CppProxy extends FormViewmodel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void action(int elementId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_action(this.nativeRef, elementId);
        }
        private native void native_action(long _nativeRef, int elementId);

        @Override
        public void back()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_back(this.nativeRef);
        }
        private native void native_back(long _nativeRef);

        @Override
        public ArrayList<Field> fields()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_fields(this.nativeRef);
        }
        private native ArrayList<Field> native_fields(long _nativeRef);

        @Override
        public void onLoad(FormView view, GenericForm form)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLoad(this.nativeRef, view, form);
        }
        private native void native_onLoad(long _nativeRef, FormView view, GenericForm form);

        @Override
        public boolean hideNavigation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hideNavigation(this.nativeRef);
        }
        private native boolean native_hideNavigation(long _nativeRef);

        @Override
        public boolean holdonToVm()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_holdonToVm(this.nativeRef);
        }
        private native boolean native_holdonToVm(long _nativeRef);
    }
}
