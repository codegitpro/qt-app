// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

package net.ai;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Portal {
    public abstract void createFolder(int parentFolderId, String folderName, OsForm form);

    public abstract void renameFolder(int folderId, String newName, OsForm form);

    public abstract void renameFile(int fileId, String newName, OsForm form);

    public abstract String ping();

    public abstract void watchDirectory(int id, DirectoryView view);

    public abstract void unwatchDirectory(int id);

    public abstract void downloadAll(ArrayList<Integer> folderIds, ArrayList<Integer> fileIds);

    public abstract void saveAll(String targetFolder, ArrayList<Integer> folderIds, ArrayList<Integer> fileIds);

    public abstract void deleteAll(ArrayList<Integer> folderIds, ArrayList<Integer> fileIds);

    public abstract void uploadAll(int targetFolderId, String commonFolder, ArrayList<String> relativeFilePaths);

    public abstract void uploadFilesOnly(int targetFolderId, ArrayList<String> filenames, ArrayList<String> paths, ArrayList<byte[]> thumbnails);

    public abstract void preview(int fileId);

    public abstract void clearCache();

    public abstract void cancelNetworkOperations();

    public abstract void signOut();

    public abstract void about();

    public static Portal create(Worker w, String appDataLocation, int thumbPx, OsIo io, OsGui gui, ScreenType type)
    {
        return CppProxy.create(w,
                               appDataLocation,
                               thumbPx,
                               io,
                               gui,
                               type);
    }

    private static final class CppProxy extends Portal
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void createFolder(int parentFolderId, String folderName, OsForm form)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createFolder(this.nativeRef, parentFolderId, folderName, form);
        }
        private native void native_createFolder(long _nativeRef, int parentFolderId, String folderName, OsForm form);

        @Override
        public void renameFolder(int folderId, String newName, OsForm form)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_renameFolder(this.nativeRef, folderId, newName, form);
        }
        private native void native_renameFolder(long _nativeRef, int folderId, String newName, OsForm form);

        @Override
        public void renameFile(int fileId, String newName, OsForm form)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_renameFile(this.nativeRef, fileId, newName, form);
        }
        private native void native_renameFile(long _nativeRef, int fileId, String newName, OsForm form);

        @Override
        public String ping()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_ping(this.nativeRef);
        }
        private native String native_ping(long _nativeRef);

        @Override
        public void watchDirectory(int id, DirectoryView view)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_watchDirectory(this.nativeRef, id, view);
        }
        private native void native_watchDirectory(long _nativeRef, int id, DirectoryView view);

        @Override
        public void unwatchDirectory(int id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_unwatchDirectory(this.nativeRef, id);
        }
        private native void native_unwatchDirectory(long _nativeRef, int id);

        @Override
        public void downloadAll(ArrayList<Integer> folderIds, ArrayList<Integer> fileIds)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_downloadAll(this.nativeRef, folderIds, fileIds);
        }
        private native void native_downloadAll(long _nativeRef, ArrayList<Integer> folderIds, ArrayList<Integer> fileIds);

        @Override
        public void saveAll(String targetFolder, ArrayList<Integer> folderIds, ArrayList<Integer> fileIds)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_saveAll(this.nativeRef, targetFolder, folderIds, fileIds);
        }
        private native void native_saveAll(long _nativeRef, String targetFolder, ArrayList<Integer> folderIds, ArrayList<Integer> fileIds);

        @Override
        public void deleteAll(ArrayList<Integer> folderIds, ArrayList<Integer> fileIds)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_deleteAll(this.nativeRef, folderIds, fileIds);
        }
        private native void native_deleteAll(long _nativeRef, ArrayList<Integer> folderIds, ArrayList<Integer> fileIds);

        @Override
        public void uploadAll(int targetFolderId, String commonFolder, ArrayList<String> relativeFilePaths)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_uploadAll(this.nativeRef, targetFolderId, commonFolder, relativeFilePaths);
        }
        private native void native_uploadAll(long _nativeRef, int targetFolderId, String commonFolder, ArrayList<String> relativeFilePaths);

        @Override
        public void uploadFilesOnly(int targetFolderId, ArrayList<String> filenames, ArrayList<String> paths, ArrayList<byte[]> thumbnails)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_uploadFilesOnly(this.nativeRef, targetFolderId, filenames, paths, thumbnails);
        }
        private native void native_uploadFilesOnly(long _nativeRef, int targetFolderId, ArrayList<String> filenames, ArrayList<String> paths, ArrayList<byte[]> thumbnails);

        @Override
        public void preview(int fileId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_preview(this.nativeRef, fileId);
        }
        private native void native_preview(long _nativeRef, int fileId);

        @Override
        public void clearCache()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clearCache(this.nativeRef);
        }
        private native void native_clearCache(long _nativeRef);

        @Override
        public void cancelNetworkOperations()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_cancelNetworkOperations(this.nativeRef);
        }
        private native void native_cancelNetworkOperations(long _nativeRef);

        @Override
        public void signOut()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_signOut(this.nativeRef);
        }
        private native void native_signOut(long _nativeRef);

        @Override
        public void about()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_about(this.nativeRef);
        }
        private native void native_about(long _nativeRef);

        public static native Portal create(Worker w, String appDataLocation, int thumbPx, OsIo io, OsGui gui, ScreenType type);
    }
}
