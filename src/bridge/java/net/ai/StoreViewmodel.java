// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

package net.ai;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class StoreViewmodel {
    public abstract void onTransactionStates(HashMap<String, TransactionDetail> states);

    public abstract void onProducts(ArrayList<Product> products);

    public abstract void onRestoreFail(String errorMessage);

    public abstract void onRestoreFinished();

    private static final class CppProxy extends StoreViewmodel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void onTransactionStates(HashMap<String, TransactionDetail> states)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onTransactionStates(this.nativeRef, states);
        }
        private native void native_onTransactionStates(long _nativeRef, HashMap<String, TransactionDetail> states);

        @Override
        public void onProducts(ArrayList<Product> products)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onProducts(this.nativeRef, products);
        }
        private native void native_onProducts(long _nativeRef, ArrayList<Product> products);

        @Override
        public void onRestoreFail(String errorMessage)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onRestoreFail(this.nativeRef, errorMessage);
        }
        private native void native_onRestoreFail(long _nativeRef, String errorMessage);

        @Override
        public void onRestoreFinished()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onRestoreFinished(this.nativeRef);
        }
        private native void native_onRestoreFinished(long _nativeRef);
    }
}
