// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ai {

class BinaryResult;
class BoolResult;
class CancellationToken;
class HttpProgressResult;
class HttpResult;
class LongResult;
class StringResult;
class StringsResult;
class VoidResult;
enum class FileType;
enum class HttpVerb;
enum class LogType;
struct Header;

class OsIo {
public:
    virtual ~OsIo() {}

    virtual void log(LogType type, int32_t line, const std::string & file, const std::string & message) = 0;

    virtual void log_lines(LogType type, int32_t line, const std::string & file, const std::vector<std::string> & messages) = 0;

    virtual void file_readall(const std::string & path, const std::shared_ptr<BinaryResult> & result) = 0;

    virtual void file_writeall(const std::string & path, const std::vector<uint8_t> & content, const std::shared_ptr<BoolResult> & result) = 0;

    virtual void file_writeall_safely(const std::string & path, const std::vector<uint8_t> & content, const std::shared_ptr<BoolResult> & result) = 0;

    virtual void file_write_password(const std::string & username, const std::string & password, const std::shared_ptr<BoolResult> & result) = 0;

    virtual void file_read_password(const std::string & username, const std::shared_ptr<StringResult> & result) = 0;

    virtual void file_size(const std::string & path, const std::shared_ptr<LongResult> & result) = 0;

    virtual bool file_thumbnail(const std::string & path, FileType type, const std::shared_ptr<BinaryResult> & result) = 0;

    virtual void copy_file(const std::string & current_path, const std::string & new_path, const std::shared_ptr<BoolResult> & result) = 0;

    virtual void make_path(const std::string & path, const std::shared_ptr<BoolResult> & result) = 0;

    virtual void rename_file(const std::string & current_path, const std::string & new_path, const std::shared_ptr<BoolResult> & result) = 0;

    virtual std::shared_ptr<CancellationToken> http_request(HttpVerb verb, const std::string & url, const std::vector<Header> & headers, const std::string & body, const std::shared_ptr<HttpResult> & result) = 0;

    virtual std::shared_ptr<CancellationToken> http_upload_file(HttpVerb verb, const std::string & url, const std::string & file_path, const std::vector<Header> & headers, const std::shared_ptr<HttpProgressResult> & result) = 0;

    virtual std::shared_ptr<CancellationToken> http_download_file(const std::string & url, const std::string & file_path, const std::vector<Header> & headers, int64_t size, const std::string & md5, const std::shared_ptr<HttpProgressResult> & result) = 0;

    virtual void wait(int32_t millis, const std::shared_ptr<VoidResult> & result) = 0;

    virtual void file_expand_directories(const std::vector<std::string> & paths, const std::shared_ptr<StringsResult> & result) = 0;

    virtual void file_copy_hierarchy(const std::string & dest_root_path, const std::vector<std::string> & dest_relative_paths, const std::vector<std::string> & src_paths) = 0;

    virtual void file_clear_cache(const std::string & username, const std::shared_ptr<BoolResult> & result) = 0;
};

}  // namespace ai
