// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ai {

class DirectoryView;
class OsForm;
class OsGui;
class OsIo;
class Worker;
enum class ScreenType;

class Portal {
public:
    virtual ~Portal() {}

    static std::shared_ptr<Portal> create(const std::shared_ptr<Worker> & w, const std::string & app_data_location, int32_t thumb_px, const std::shared_ptr<OsIo> & io, const std::shared_ptr<OsGui> & gui, ScreenType type);

    virtual void create_folder(int32_t parent_folder_id, const std::string & folder_name, const std::shared_ptr<OsForm> & form) = 0;

    virtual void rename_folder(int32_t folder_id, const std::string & new_name, const std::shared_ptr<OsForm> & form) = 0;

    virtual void rename_file(int32_t file_id, const std::string & new_name, const std::shared_ptr<OsForm> & form) = 0;

    virtual std::string ping() = 0;

    virtual void watch_directory(int32_t id, const std::shared_ptr<DirectoryView> & view) = 0;

    virtual void unwatch_directory(int32_t id) = 0;

    virtual void download_all(const std::vector<int32_t> & folder_ids, const std::vector<int32_t> & file_ids) = 0;

    virtual void save_all(const std::string & target_folder, const std::vector<int32_t> & folder_ids, const std::vector<int32_t> & file_ids) = 0;

    virtual void delete_all(const std::vector<int32_t> & folder_ids, const std::vector<int32_t> & file_ids) = 0;

    virtual void upload_all(int32_t target_folder_id, const std::string & common_folder, const std::vector<std::string> & relative_file_paths) = 0;

    virtual void upload_files_only(int32_t target_folder_id, const std::vector<std::string> & filenames, const std::vector<std::string> & paths, const std::vector<std::vector<uint8_t>> & thumbnails) = 0;

    virtual void preview(int32_t file_id) = 0;

    virtual void clear_cache() = 0;

    virtual void cancel_network_operations() = 0;

    virtual void sign_out() = 0;

    virtual void about() = 0;
};

}  // namespace ai
