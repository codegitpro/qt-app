// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#import "AIRootViewmodel+Private.h"
#import "AIRootViewmodel.h"
#import "AIDiagnostic+Private.h"
#import "AIOsIo+Private.h"
#import "AIScreenType+Private.h"
#import "AIUiCallback+Private.h"
#import "AIView+Private.h"
#import "AIWorker+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface AIRootViewmodel ()

- (id)initWithCpp:(const std::shared_ptr<::ai::RootViewmodel>&)cppRef;

@end

@implementation AIRootViewmodel {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ai::RootViewmodel>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ai::RootViewmodel>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable AIRootViewmodel *)create:(nullable id<AIWorker>)scheduler
                     appDataLocation:(nonnull NSString *)appDataLocation
                             thumbPx:(int32_t)thumbPx
                                  io:(nullable id<AIOsIo>)io
                                view:(nullable id<AIView>)view
                                type:(AIScreenType)type
                            callback:(nullable id<AIUiCallback>)callback
                              logger:(nullable id<AIDiagnostic>)logger {
    try {
        auto objcpp_result_ = ::ai::RootViewmodel::create(::djinni_generated::Worker::toCpp(scheduler),
                                                          ::djinni::String::toCpp(appDataLocation),
                                                          ::djinni::I32::toCpp(thumbPx),
                                                          ::djinni_generated::OsIo::toCpp(io),
                                                          ::djinni_generated::View::toCpp(view),
                                                          ::djinni::Enum<::ai::ScreenType, AIScreenType>::toCpp(type),
                                                          ::djinni_generated::UiCallback::toCpp(callback),
                                                          ::djinni_generated::Diagnostic::toCpp(logger));
        return ::djinni_generated::RootViewmodel::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto RootViewmodel::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RootViewmodel::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<AIRootViewmodel>(cpp);
}

}  // namespace djinni_generated

@end
