// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#import "AIOsIo+Private.h"
#import "AIOsIo.h"
#import "AIBinaryResult+Private.h"
#import "AIBoolResult+Private.h"
#import "AICancellationToken+Private.h"
#import "AIFileType+Private.h"
#import "AIHeader+Private.h"
#import "AIHttpProgressResult+Private.h"
#import "AIHttpResult+Private.h"
#import "AIHttpVerb+Private.h"
#import "AILogType+Private.h"
#import "AILongResult+Private.h"
#import "AIStringResult+Private.h"
#import "AIStringsResult+Private.h"
#import "AIVoidResult+Private.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class OsIo::ObjcProxy final
: public ::ai::OsIo
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::OsIo;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void log(::ai::LogType c_type, int32_t c_line, const std::string & c_file, const std::string & c_message) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() log:(::djinni::Enum<::ai::LogType, AILogType>::fromCpp(c_type))
                                                     line:(::djinni::I32::fromCpp(c_line))
                                                     file:(::djinni::String::fromCpp(c_file))
                                                  message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void log_lines(::ai::LogType c_type, int32_t c_line, const std::string & c_file, const std::vector<std::string> & c_messages) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() logLines:(::djinni::Enum<::ai::LogType, AILogType>::fromCpp(c_type))
                                                          line:(::djinni::I32::fromCpp(c_line))
                                                          file:(::djinni::String::fromCpp(c_file))
                                                      messages:(::djinni::List<::djinni::String>::fromCpp(c_messages))];
        }
    }
    void file_readall(const std::string & c_path, const std::shared_ptr<::ai::BinaryResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileReadall:(::djinni::String::fromCpp(c_path))
                                                           result:(::djinni_generated::BinaryResult::fromCpp(c_result))];
        }
    }
    void file_writeall(const std::string & c_path, const std::vector<uint8_t> & c_content, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileWriteall:(::djinni::String::fromCpp(c_path))
                                                           content:(::djinni::Binary::fromCpp(c_content))
                                                            result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
    void file_writeall_safely(const std::string & c_path, const std::vector<uint8_t> & c_content, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileWriteallSafely:(::djinni::String::fromCpp(c_path))
                                                                 content:(::djinni::Binary::fromCpp(c_content))
                                                                  result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
    void file_write_password(const std::string & c_username, const std::string & c_password, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileWritePassword:(::djinni::String::fromCpp(c_username))
                                                               password:(::djinni::String::fromCpp(c_password))
                                                                 result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
    void file_read_password(const std::string & c_username, const std::shared_ptr<::ai::StringResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileReadPassword:(::djinni::String::fromCpp(c_username))
                                                                result:(::djinni_generated::StringResult::fromCpp(c_result))];
        }
    }
    void file_size(const std::string & c_path, const std::shared_ptr<::ai::LongResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileSize:(::djinni::String::fromCpp(c_path))
                                                        result:(::djinni_generated::LongResult::fromCpp(c_result))];
        }
    }
    bool file_thumbnail(const std::string & c_path, ::ai::FileType c_type, const std::shared_ptr<::ai::BinaryResult> & c_result) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() fileThumbnail:(::djinni::String::fromCpp(c_path))
                                                                                     type:(::djinni::Enum<::ai::FileType, AIFileType>::fromCpp(c_type))
                                                                                   result:(::djinni_generated::BinaryResult::fromCpp(c_result))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    void copy_file(const std::string & c_current_path, const std::string & c_new_path, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() copyFile:(::djinni::String::fromCpp(c_current_path))
                                                       newPath:(::djinni::String::fromCpp(c_new_path))
                                                        result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
    void make_path(const std::string & c_path, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() makePath:(::djinni::String::fromCpp(c_path))
                                                        result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
    void rename_file(const std::string & c_current_path, const std::string & c_new_path, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() renameFile:(::djinni::String::fromCpp(c_current_path))
                                                         newPath:(::djinni::String::fromCpp(c_new_path))
                                                          result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
    std::shared_ptr<::ai::CancellationToken> http_request(::ai::HttpVerb c_verb, const std::string & c_url, const std::vector<::ai::Header> & c_headers, const std::string & c_body, const std::shared_ptr<::ai::HttpResult> & c_result) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() httpRequest:(::djinni::Enum<::ai::HttpVerb, AIHttpVerb>::fromCpp(c_verb))
                                                                                    url:(::djinni::String::fromCpp(c_url))
                                                                                headers:(::djinni::List<::djinni_generated::Header>::fromCpp(c_headers))
                                                                                   body:(::djinni::String::fromCpp(c_body))
                                                                                 result:(::djinni_generated::HttpResult::fromCpp(c_result))];
            return ::djinni_generated::CancellationToken::toCpp(objcpp_result_);
        }
    }
    std::shared_ptr<::ai::CancellationToken> http_upload_file(::ai::HttpVerb c_verb, const std::string & c_url, const std::string & c_file_path, const std::vector<::ai::Header> & c_headers, const std::shared_ptr<::ai::HttpProgressResult> & c_result) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() httpUploadFile:(::djinni::Enum<::ai::HttpVerb, AIHttpVerb>::fromCpp(c_verb))
                                                                                       url:(::djinni::String::fromCpp(c_url))
                                                                                  filePath:(::djinni::String::fromCpp(c_file_path))
                                                                                   headers:(::djinni::List<::djinni_generated::Header>::fromCpp(c_headers))
                                                                                    result:(::djinni_generated::HttpProgressResult::fromCpp(c_result))];
            return ::djinni_generated::CancellationToken::toCpp(objcpp_result_);
        }
    }
    std::shared_ptr<::ai::CancellationToken> http_download_file(const std::string & c_url, const std::string & c_file_path, const std::vector<::ai::Header> & c_headers, int64_t c_size, const std::string & c_md5, const std::shared_ptr<::ai::HttpProgressResult> & c_result) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() httpDownloadFile:(::djinni::String::fromCpp(c_url))
                                                                                    filePath:(::djinni::String::fromCpp(c_file_path))
                                                                                     headers:(::djinni::List<::djinni_generated::Header>::fromCpp(c_headers))
                                                                                        size:(::djinni::I64::fromCpp(c_size))
                                                                                         md5:(::djinni::String::fromCpp(c_md5))
                                                                                      result:(::djinni_generated::HttpProgressResult::fromCpp(c_result))];
            return ::djinni_generated::CancellationToken::toCpp(objcpp_result_);
        }
    }
    void wait(int32_t c_millis, const std::shared_ptr<::ai::VoidResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() wait:(::djinni::I32::fromCpp(c_millis))
                                                    result:(::djinni_generated::VoidResult::fromCpp(c_result))];
        }
    }
    void file_expand_directories(const std::vector<std::string> & c_paths, const std::shared_ptr<::ai::StringsResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileExpandDirectories:(::djinni::List<::djinni::String>::fromCpp(c_paths))
                                                                     result:(::djinni_generated::StringsResult::fromCpp(c_result))];
        }
    }
    void file_copy_hierarchy(const std::string & c_dest_root_path, const std::vector<std::string> & c_dest_relative_paths, const std::vector<std::string> & c_src_paths) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileCopyHierarchy:(::djinni::String::fromCpp(c_dest_root_path))
                                                      destRelativePaths:(::djinni::List<::djinni::String>::fromCpp(c_dest_relative_paths))
                                                               srcPaths:(::djinni::List<::djinni::String>::fromCpp(c_src_paths))];
        }
    }
    void file_clear_cache(const std::string & c_username, const std::shared_ptr<::ai::BoolResult> & c_result) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() fileClearCache:(::djinni::String::fromCpp(c_username))
                                                              result:(::djinni_generated::BoolResult::fromCpp(c_result))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto OsIo::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto OsIo::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
