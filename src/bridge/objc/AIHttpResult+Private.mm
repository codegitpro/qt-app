// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#import "AIHttpResult+Private.h"
#import "AIHttpResult.h"
#import "AIHeader+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface AIHttpResult ()

- (id)initWithCpp:(const std::shared_ptr<::ai::HttpResult>&)cppRef;

@end

@implementation AIHttpResult {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ai::HttpResult>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ai::HttpResult>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onResult:(int32_t)statusCode
         headers:(nonnull NSArray<AIHeader *> *)headers
            data:(nonnull NSString *)data {
    try {
        _cppRefHandle.get()->on_result(::djinni::I32::toCpp(statusCode),
                                       ::djinni::List<::djinni_generated::Header>::toCpp(headers),
                                       ::djinni::String::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HttpResult::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpResult::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<AIHttpResult>(cpp);
}

}  // namespace djinni_generated

@end
