// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#import "AIDiagnostic+Private.h"
#import "AIDiagnostic.h"
#import "AILogType+Private.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class Diagnostic::ObjcProxy final
: public ::ai::Diagnostic
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Diagnostic;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void log(::ai::LogType c_type, int32_t c_line, const std::string & c_file, const std::string & c_message) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() log:(::djinni::Enum<::ai::LogType, AILogType>::fromCpp(c_type))
                                                     line:(::djinni::I32::fromCpp(c_line))
                                                     file:(::djinni::String::fromCpp(c_file))
                                                  message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void log_lines(::ai::LogType c_type, int32_t c_line, const std::string & c_file, const std::vector<std::string> & c_messages) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() logLines:(::djinni::Enum<::ai::LogType, AILogType>::fromCpp(c_type))
                                                          line:(::djinni::I32::fromCpp(c_line))
                                                          file:(::djinni::String::fromCpp(c_file))
                                                      messages:(::djinni::List<::djinni::String>::fromCpp(c_messages))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Diagnostic::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Diagnostic::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
