// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#import "AIOsGui+Private.h"
#import "AIOsGui.h"
#import "AIElement+Private.h"
#import "AIFileType+Private.h"
#import "AIIntResult+Private.h"
#import "AIOsForm+Private.h"
#import "AIVoidResult+Private.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class OsGui::ObjcProxy final
: public ::ai::OsGui
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::OsGui;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void show_cloudstore() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() showCloudstore];
        }
    }
    void gui_thread(const std::shared_ptr<::ai::VoidResult> & c_cb) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() guiThread:(::djinni_generated::VoidResult::fromCpp(c_cb))];
        }
    }
    void back() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() back];
        }
    }
    void open_link_in_browser(const std::string & c_url) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() openLinkInBrowser:(::djinni::String::fromCpp(c_url))];
        }
    }
    std::shared_ptr<::ai::OsForm> create_form(const std::string & c_title, bool c_start_hierarchy, int32_t c_width, int32_t c_height, const std::shared_ptr<::ai::IntResult> & c_action, const std::vector<::ai::Element> & c_elements) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createForm:(::djinni::String::fromCpp(c_title))
                                                                        startHierarchy:(::djinni::Bool::fromCpp(c_start_hierarchy))
                                                                                 width:(::djinni::I32::fromCpp(c_width))
                                                                                height:(::djinni::I32::fromCpp(c_height))
                                                                                action:(::djinni_generated::IntResult::fromCpp(c_action))
                                                                              elements:(::djinni::List<::djinni_generated::Element>::fromCpp(c_elements))];
            return ::djinni_generated::OsForm::toCpp(objcpp_result_);
        }
    }
    void show_message(const std::string & c_message) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() showMessage:(::djinni::String::fromCpp(c_message))];
        }
    }
    void preview(::ai::FileType c_type, const std::string & c_path, int32_t c_file_id, const std::string & c_file_name) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() preview:(::djinni::Enum<::ai::FileType, AIFileType>::fromCpp(c_type))
                                                         path:(::djinni::String::fromCpp(c_path))
                                                       fileId:(::djinni::I32::fromCpp(c_file_id))
                                                     fileName:(::djinni::String::fromCpp(c_file_name))];
        }
    }
    void reset() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() reset];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto OsGui::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto OsGui::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
