// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from portal.djinni

#import "AIPortal+Private.h"
#import "AIPortal.h"
#import "AIDirectoryView+Private.h"
#import "AIOsForm+Private.h"
#import "AIOsGui+Private.h"
#import "AIOsIo+Private.h"
#import "AIScreenType+Private.h"
#import "AIWorker+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface AIPortal ()

- (id)initWithCpp:(const std::shared_ptr<::ai::Portal>&)cppRef;

@end

@implementation AIPortal {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ai::Portal>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ai::Portal>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable AIPortal *)create:(nullable id<AIWorker>)w
              appDataLocation:(nonnull NSString *)appDataLocation
                      thumbPx:(int32_t)thumbPx
                           io:(nullable id<AIOsIo>)io
                          gui:(nullable id<AIOsGui>)gui
                         type:(AIScreenType)type {
    try {
        auto objcpp_result_ = ::ai::Portal::create(::djinni_generated::Worker::toCpp(w),
                                                   ::djinni::String::toCpp(appDataLocation),
                                                   ::djinni::I32::toCpp(thumbPx),
                                                   ::djinni_generated::OsIo::toCpp(io),
                                                   ::djinni_generated::OsGui::toCpp(gui),
                                                   ::djinni::Enum<::ai::ScreenType, AIScreenType>::toCpp(type));
        return ::djinni_generated::Portal::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createFolder:(int32_t)parentFolderId
          folderName:(nonnull NSString *)folderName
                form:(nullable id<AIOsForm>)form {
    try {
        _cppRefHandle.get()->create_folder(::djinni::I32::toCpp(parentFolderId),
                                           ::djinni::String::toCpp(folderName),
                                           ::djinni_generated::OsForm::toCpp(form));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)renameFolder:(int32_t)folderId
             newName:(nonnull NSString *)newName
                form:(nullable id<AIOsForm>)form {
    try {
        _cppRefHandle.get()->rename_folder(::djinni::I32::toCpp(folderId),
                                           ::djinni::String::toCpp(newName),
                                           ::djinni_generated::OsForm::toCpp(form));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)renameFile:(int32_t)fileId
           newName:(nonnull NSString *)newName
              form:(nullable id<AIOsForm>)form {
    try {
        _cppRefHandle.get()->rename_file(::djinni::I32::toCpp(fileId),
                                         ::djinni::String::toCpp(newName),
                                         ::djinni_generated::OsForm::toCpp(form));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)ping {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->ping();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)watchDirectory:(int32_t)id
                  view:(nullable id<AIDirectoryView>)view {
    try {
        _cppRefHandle.get()->watch_directory(::djinni::I32::toCpp(id),
                                             ::djinni_generated::DirectoryView::toCpp(view));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unwatchDirectory:(int32_t)id {
    try {
        _cppRefHandle.get()->unwatch_directory(::djinni::I32::toCpp(id));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)downloadAll:(nonnull NSArray<NSNumber *> *)folderIds
            fileIds:(nonnull NSArray<NSNumber *> *)fileIds {
    try {
        _cppRefHandle.get()->download_all(::djinni::List<::djinni::I32>::toCpp(folderIds),
                                          ::djinni::List<::djinni::I32>::toCpp(fileIds));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)saveAll:(nonnull NSString *)targetFolder
      folderIds:(nonnull NSArray<NSNumber *> *)folderIds
        fileIds:(nonnull NSArray<NSNumber *> *)fileIds {
    try {
        _cppRefHandle.get()->save_all(::djinni::String::toCpp(targetFolder),
                                      ::djinni::List<::djinni::I32>::toCpp(folderIds),
                                      ::djinni::List<::djinni::I32>::toCpp(fileIds));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)deleteAll:(nonnull NSArray<NSNumber *> *)folderIds
          fileIds:(nonnull NSArray<NSNumber *> *)fileIds {
    try {
        _cppRefHandle.get()->delete_all(::djinni::List<::djinni::I32>::toCpp(folderIds),
                                        ::djinni::List<::djinni::I32>::toCpp(fileIds));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)uploadAll:(int32_t)targetFolderId
     commonFolder:(nonnull NSString *)commonFolder
relativeFilePaths:(nonnull NSArray<NSString *> *)relativeFilePaths {
    try {
        _cppRefHandle.get()->upload_all(::djinni::I32::toCpp(targetFolderId),
                                        ::djinni::String::toCpp(commonFolder),
                                        ::djinni::List<::djinni::String>::toCpp(relativeFilePaths));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)uploadFilesOnly:(int32_t)targetFolderId
              filenames:(nonnull NSArray<NSString *> *)filenames
                  paths:(nonnull NSArray<NSString *> *)paths
             thumbnails:(nonnull NSArray<NSData *> *)thumbnails {
    try {
        _cppRefHandle.get()->upload_files_only(::djinni::I32::toCpp(targetFolderId),
                                               ::djinni::List<::djinni::String>::toCpp(filenames),
                                               ::djinni::List<::djinni::String>::toCpp(paths),
                                               ::djinni::List<::djinni::Binary>::toCpp(thumbnails));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)preview:(int32_t)fileId {
    try {
        _cppRefHandle.get()->preview(::djinni::I32::toCpp(fileId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clearCache {
    try {
        _cppRefHandle.get()->clear_cache();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)cancelNetworkOperations {
    try {
        _cppRefHandle.get()->cancel_network_operations();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)signOut {
    try {
        _cppRefHandle.get()->sign_out();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)about {
    try {
        _cppRefHandle.get()->about();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Portal::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Portal::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<AIPortal>(cpp);
}

}  // namespace djinni_generated

@end
